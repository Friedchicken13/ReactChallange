{"version":3,"sources":["components/productdetails.jsx","components/currencytab.jsx","components/searchbar.jsx","components/productdescription.jsx","components/mainproducttable.jsx","common/constants.js","common/schemas.js","App.js","serviceWorker.js","index.js"],"names":["ProductDetails","props","filterText","products","filter","product","name","indexOf","detailisvisibile","Fragment","map","key","id","price","amount","base","className","onClick","onProductSelection","buttonText","CurrencyTab","availableCurrency","currencyName","baseCurrency","onChange","SearchBar","handleFilterTextChange","bind","e","this","onFilterTextChange","target","value","type","placeholder","Component","ProductDescription","description","MainProductTable","handleProductSelection","text","setState","selectedProduct","allproducts","state","p","relatedProductList","relatedProducts","calculateNewPriceBySelectedCurrency","newBaseCurrency","referenceproduct","referenceProduct","rate","xchangelist","c","rates","parseFloat","toFixed","handleCurrencyChange","currency","mycurrencyList","exchangerates","b","referenceproducts","buttonVisibility","EXCHANGERATE_SCHEMA","items","properties","USD","CNY","required","AUD","PRODUCTS_SCHEMA","title","default","examples","additionalItems","anyOf","$id","additionalProperties","App","jsoncurrency","JSON","parse","stringify","jsonproduct","ajv","Ajv","validExchangeRate","validate","validProduct","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5f9b6b47.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst ProductDetails = (props) => {\r\n  const filterText = props.filterText;\r\n  const products = props.products\r\n    ? props.products.filter(\r\n        (product) => product.name.indexOf(filterText) !== -1\r\n      )\r\n    : props.products;\r\n  const detailisvisibile = props.detailisvisibile;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Price</th>\r\n            <th />\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {products.map((product) => (\r\n            <tr key={product.id}>\r\n              <td>{product.name}</td>\r\n              <td>{product.price.amount + \" \" + product.price.base}</td>\r\n              <td>\r\n                {!detailisvisibile ? (\r\n                  <button\r\n                    className=\"btn btn-warning btn-sm\"\r\n                    onClick={() =>\r\n                      props.onProductSelection(product, props.buttonText)\r\n                    }\r\n                  >\r\n                    {props.buttonText}\r\n                  </button>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ProductDetails;\r\n","import React from \"react\";\r\n\r\nconst CurrencyTab = (props) => {\r\n  return props.availableCurrency.map((currencyName) => (\r\n    <button\r\n      className={\r\n        props.baseCurrency === currencyName\r\n          ? \" btn btn-outline-dark btn-sm m-2 active\"\r\n          : \"btn btn-outline-dark btn-sm m-2\"\r\n      }\r\n      key={currencyName}\r\n      onClick={() => props.onChange(currencyName)}\r\n    >\r\n      {currencyName}\r\n    </button>\r\n  ));\r\n};\r\n\r\nexport default CurrencyTab;\r\n","import React, { Component } from \"react\";\r\n\r\nclass SearchBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\r\n  }\r\n\r\n  handleFilterTextChange(e) {\r\n    this.props.onFilterTextChange(e.target.value);\r\n  }\r\n\r\n  render() {\r\n    const filterText = this.props.filterText;\r\n    return (\r\n      <form>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search...\"\r\n          value={filterText}\r\n          onChange={this.handleFilterTextChange}\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\n\r\nconst ProductDescription = ({ product }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <label className=\"font-weight-bold \">Product details</label>\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <td>Id</td>\r\n            <td>{product.id}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Description</td>\r\n            <td>{product.description}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      <label className=\"font-weight-bold \">Related products</label>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ProductDescription;\r\n","import React, { Component } from \"react\";\r\nimport ProductDetails from \"../components/productdetails\";\r\nimport CurrencyTab from \"../components/currencytab\";\r\nimport SearchBar from \"../components/searchbar\";\r\nimport Description from \"./productdescription\";\r\nimport {\r\n  BASE_CURRENCY,\r\n  BUTTONTEXT_DETAILS,\r\n  BUTTONTEXT_CLOSE,\r\n} from \"../common/constants\";\r\n\r\nclass MainProductTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filterText: \"\",\r\n      selectedProduct: \"\",\r\n      buttonText: BUTTONTEXT_DETAILS,\r\n      allproducts: this.props.products,\r\n      relatedProductList: this.props.products,\r\n      detailisvisibile: false,\r\n      mycurrencyList: this.props.exchangerates.map((b) => b.base),\r\n      xchangelist: this.props.exchangerates,\r\n      baseCurrency: BASE_CURRENCY,\r\n      referenceProduct: this.props.referenceproducts,\r\n    };\r\n    this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.handleCurrencyChange(\"AUD\");\r\n  }\r\n\r\n  handleFilterTextChange(filterText) {\r\n    this.setState({\r\n      filterText: filterText,\r\n    });\r\n  }\r\n  handleProductSelection = (product, text) => {\r\n    if (text === \"Details\") {\r\n      this.setState({\r\n        detailisvisibile: true,\r\n        buttonText: BUTTONTEXT_CLOSE,\r\n        selectedProduct: product,\r\n        allproducts: this.state.allproducts.filter((p) => p.id === product.id),\r\n        relatedProductList: this.state.relatedProductList.filter(\r\n          (p) => product.relatedProducts.indexOf(p.id) !== -1\r\n        ),\r\n      });\r\n    } else {\r\n      this.setState({\r\n        buttonText: BUTTONTEXT_DETAILS,\r\n        allproducts: this.props.products, //jsonproduct,\r\n        relatedProductList: this.props.products, //jsonproduct,\r\n        detailisvisibile: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  calculateNewPriceBySelectedCurrency = (product, newBaseCurrency) => {\r\n    var referenceproduct = this.state.referenceProduct.filter(\r\n      (p) => p.id === product.id\r\n    )[0];\r\n\r\n    if (referenceproduct.price.base !== newBaseCurrency) {\r\n      let xchangeRate = this.state.xchangelist.filter(\r\n        (c) => c.base === referenceproduct.price.base\r\n      )[0];\r\n\r\n      var rate = xchangeRate.rates[newBaseCurrency];\r\n\r\n      product.price.amount = referenceproduct.price.amount * rate;\r\n    } else {\r\n      product.price.amount = referenceproduct.price.amount;\r\n    }\r\n\r\n    return parseFloat(product.price.amount).toFixed(2);\r\n  };\r\n\r\n  handleCurrencyChange = (currency) => {\r\n    var products = this.props.products.filter(\r\n      (p) =>\r\n        (p.price.amount = this.calculateNewPriceBySelectedCurrency(\r\n          p,\r\n          currency\r\n        )) && (p.price.base = currency)\r\n    );\r\n    this.setState({\r\n      baseCurrency: currency,\r\n      products,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const detailisvisibile = this.state.detailisvisibile;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <CurrencyTab\r\n          availableCurrency={this.state.mycurrencyList}\r\n          baseCurrency={this.state.baseCurrency}\r\n          onChange={this.handleCurrencyChange}\r\n        />\r\n        {!detailisvisibile ? (\r\n          <SearchBar\r\n            filterText={this.state.filterText}\r\n            onFilterTextChange={this.handleFilterTextChange}\r\n          />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <ProductDetails\r\n          products={this.state.allproducts}\r\n          filterText={this.state.filterText}\r\n          onProductSelection={this.handleProductSelection}\r\n          buttonText={this.state.buttonText}\r\n          buttonVisibility={true}\r\n        />\r\n        {detailisvisibile ? (\r\n          <div>\r\n            <Description product={this.state.selectedProduct} />\r\n            <ProductDetails\r\n              products={this.state.relatedProductList}\r\n              filterText=\"\"\r\n              onProductSelection={this.handleProductSelection}\r\n              buttonText={this.state.buttonText}\r\n              detailisvisibile={detailisvisibile}\r\n            />\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default MainProductTable;\r\n","export const BASE_CURRENCY = \"AUD\";\r\nexport const BUTTONTEXT_DETAILS = \"Details\";\r\nexport const BUTTONTEXT_CLOSE = \"Close\";\r\n","export const EXCHANGERATE_SCHEMA = {\r\n  type: \"array\",\r\n  items: [\r\n    {\r\n      type: \"object\",\r\n      properties: {\r\n        base: {\r\n          type: \"string\",\r\n        },\r\n        rates: {\r\n          type: \"object\",\r\n          properties: {\r\n            USD: {\r\n              type: \"number\",\r\n            },\r\n            CNY: {\r\n              type: \"number\",\r\n            },\r\n          },\r\n          required: [\"USD\", \"CNY\"],\r\n        },\r\n      },\r\n      required: [\"base\", \"rates\"],\r\n    },\r\n    {\r\n      type: \"object\",\r\n      properties: {\r\n        base: {\r\n          type: \"string\",\r\n        },\r\n        rates: {\r\n          type: \"object\",\r\n          properties: {\r\n            AUD: {\r\n              type: \"number\",\r\n            },\r\n            CNY: {\r\n              type: \"number\",\r\n            },\r\n          },\r\n          required: [\"AUD\", \"CNY\"],\r\n        },\r\n      },\r\n      required: [\"base\", \"rates\"],\r\n    },\r\n    {\r\n      type: \"object\",\r\n      properties: {\r\n        base: {\r\n          type: \"string\",\r\n        },\r\n        rates: {\r\n          type: \"object\",\r\n          properties: {\r\n            AUD: {\r\n              type: \"number\",\r\n            },\r\n            USD: {\r\n              type: \"number\",\r\n            },\r\n          },\r\n          required: [\"AUD\", \"USD\"],\r\n        },\r\n      },\r\n      required: [\"base\", \"rates\"],\r\n    },\r\n  ],\r\n};\r\n\r\nexport const PRODUCTS_SCHEMA = {\r\n  type: \"array\",\r\n  title: \"The root schema\",\r\n  description: \"The root schema comprises the entire JSON document.\",\r\n  default: [],\r\n  examples: [\r\n    [\r\n      {\r\n        id: 1,\r\n        name: \"Brown Shoes\",\r\n        description: \"A brown shirt made from fine cotton.\",\r\n        price: {\r\n          base: \"USD\",\r\n          amount: 50,\r\n        },\r\n        relatedProducts: [2],\r\n      },\r\n      {\r\n        id: 2,\r\n        name: \"Green Pants\",\r\n        description:\r\n          \"A super slick pair of green pants, hand crafted by artisan clothmakers in the Amazon.\",\r\n        price: {\r\n          base: \"USD\",\r\n          amount: 30,\r\n        },\r\n        relatedProducts: [1, 4],\r\n      },\r\n    ],\r\n  ],\r\n  additionalItems: false,\r\n  items: {\r\n    anyOf: [\r\n      {\r\n        $id: \"#/items/anyOf/0\",\r\n        type: \"object\",\r\n        title: \"The first anyOf schema\",\r\n        description: \"An explanation about the purpose of this instance.\",\r\n        default: {},\r\n        examples: [\r\n          {\r\n            id: 1,\r\n            name: \"Brown Shoes\",\r\n            description: \"A brown shirt made from fine cotton.\",\r\n            price: {\r\n              base: \"USD\",\r\n              amount: 50,\r\n            },\r\n            relatedProducts: [2],\r\n          },\r\n        ],\r\n        required: [\"id\", \"name\", \"description\", \"price\", \"relatedProducts\"],\r\n        additionalProperties: true,\r\n        properties: {\r\n          id: {\r\n            $id: \"#/items/anyOf/0/properties/id\",\r\n            type: \"number\",\r\n            title: \"The id schema\",\r\n            description: \"An explanation about the purpose of this instance.\",\r\n            default: 0,\r\n            examples: [1],\r\n          },\r\n          name: {\r\n            $id: \"#/items/anyOf/0/properties/name\",\r\n            type: \"string\",\r\n            title: \"The name schema\",\r\n            description: \"An explanation about the purpose of this instance.\",\r\n            default: \"\",\r\n            examples: [\"Brown Shoes\"],\r\n          },\r\n          description: {\r\n            $id: \"#/items/anyOf/0/properties/description\",\r\n            type: \"string\",\r\n            title: \"The description schema\",\r\n            description: \"An explanation about the purpose of this instance.\",\r\n            default: \"\",\r\n            examples: [\"A brown shirt made from fine cotton.\"],\r\n          },\r\n          price: {\r\n            $id: \"#/items/anyOf/0/properties/price\",\r\n            type: \"object\",\r\n            title: \"The price schema\",\r\n            description: \"An explanation about the purpose of this instance.\",\r\n            default: {},\r\n            examples: [\r\n              {\r\n                base: \"USD\",\r\n                amount: 50,\r\n              },\r\n            ],\r\n            required: [\"base\", \"amount\"],\r\n            additionalProperties: true,\r\n            properties: {\r\n              base: {\r\n                $id: \"#/items/anyOf/0/properties/price/properties/base\",\r\n                type: \"string\",\r\n                title: \"The base schema\",\r\n                description:\r\n                  \"An explanation about the purpose of this instance.\",\r\n                default: \"\",\r\n                examples: [\"USD\"],\r\n              },\r\n              amount: {\r\n                $id: \"#/items/anyOf/0/properties/price/properties/amount\",\r\n                type: \"number\",\r\n                title: \"The amount schema\",\r\n                description:\r\n                  \"An explanation about the purpose of this instance.\",\r\n                default: 0,\r\n                examples: [50],\r\n              },\r\n            },\r\n          },\r\n          relatedProducts: {\r\n            $id: \"#/items/anyOf/0/properties/relatedProducts\",\r\n            type: \"array\",\r\n            title: \"The relatedProducts schema\",\r\n            description: \"An explanation about the purpose of this instance.\",\r\n            default: [],\r\n            examples: [[2]],\r\n            additionalItems: false,\r\n            items: {\r\n              anyOf: [\r\n                {\r\n                  $id:\r\n                    \"#/items/anyOf/0/properties/relatedProducts/items/anyOf/0\",\r\n                  type: \"number\",\r\n                  title: \"The first anyOf schema\",\r\n                  description:\r\n                    \"An explanation about the purpose of this instance.\",\r\n                  default: 0,\r\n                  examples: [2],\r\n                },\r\n              ],\r\n              $id: \"#/items/anyOf/0/properties/relatedProducts/items\",\r\n            },\r\n          },\r\n        },\r\n      },\r\n    ],\r\n    $id: \"#/items\",\r\n  },\r\n};\r\n","import \"./App.css\";\nimport Main from \"./components/mainproducttable\";\nimport React, { Component } from \"react\";\nimport Ajv from \"ajv\";\nimport jsoncurrency from \"./components/data/exchange_rates.json\";\nimport jsonproduct from \"./components/data/products.json\";\nimport { EXCHANGERATE_SCHEMA, PRODUCTS_SCHEMA } from \"./common/schemas.js\";\n\nclass App extends Component {\n  state = {\n    jsoncurrency: JSON.parse(JSON.stringify(jsoncurrency)),\n    jsonproduct: JSON.parse(JSON.stringify(jsonproduct)),\n    referenceproducts: JSON.parse(JSON.stringify(jsonproduct)),\n  };\n\n  render() {\n    const ajv = Ajv();\n    const validExchangeRate = ajv.validate(\n      EXCHANGERATE_SCHEMA,\n      this.state.jsoncurrency\n    );\n    const validProduct = ajv.validate(PRODUCTS_SCHEMA, this.state.jsonproduct);\n\n    return (\n      <React.Fragment>\n        {validExchangeRate && validProduct ? (\n          <Main\n            products={this.state.jsonproduct}\n            exchangerates={this.state.jsoncurrency}\n            referenceproducts={this.state.referenceproducts}\n          />\n        ) : (\n          <span>Invalid input!</span>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}